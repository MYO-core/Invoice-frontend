{"version":3,"file":"static/js/7494.2ac61e98.chunk.js","mappings":"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","sources":["components/dropdown/dropdown-style.js","components/dropdown/dropdown.js","container/project/overview/GridCard.js","components/utilities/utilities.js","../node_modules/@iconscout/react-unicons/icons/uil-ellipsis-h.js","../node_modules/antd/es/dropdown/index.js"],"sourcesContent":["import { Dropdown } from 'antd';\nimport Styled from 'styled-components';\n\nconst Content = Styled.div`\n    \n`;\n\nconst DropdownStyle = Styled(Dropdown)`\n\n`;\n\nexport { Content, DropdownStyle };\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { DropdownStyle } from './dropdown-style';\nimport { GlobalUtilityStyle } from '../../container/styled';\n\nfunction Dropdown(props) {\n  const { content, placement, title, action, children, style, className } = props;\n\n  return (\n    <DropdownStyle\n      overlayClassName={className}\n      style={style}\n      placement={placement}\n      title={title}\n      overlay={<GlobalUtilityStyle>{content}</GlobalUtilityStyle>}\n      trigger={action}\n    >\n      {children}\n    </DropdownStyle>\n  );\n}\n\nconst content = (\n  <>\n    <div className=\"block bg-white dark:bg-[#1b1e2b] shadow-regular dark:shadow-[0_5px_30px_rgba(1,4,19,.40)] py-1\">\n      <Link\n        className=\"flex items-center text-theme-gray dark:text-white60 hover:bg-primary-transparent hover:text-primary dark:hover:bg-white10 px-3 py-1.5 text-sm active\"\n        to=\"#\"\n      >\n        <span>Export to CSV</span>\n      </Link>\n      <Link\n        className=\"flex items-center text-theme-gray dark:text-white60 hover:bg-primary-transparent hover:text-primary dark:hover:bg-white10 px-3 py-1.5 text-sm active\"\n        to=\"#\"\n      >\n        <span>Export to XML</span>\n      </Link>\n      <Link\n        className=\"flex items-center text-theme-gray dark:text-white60 hover:bg-primary-transparent hover:text-primary dark:hover:bg-white10 px-3 py-1.5 text-sm active\"\n        to=\"#\"\n      >\n        <span>Export to Drive</span>\n      </Link>\n    </div>\n  </>\n);\n\nDropdown.defaultProps = {\n  action: ['hover'],\n  placement: 'bottomRight',\n  content,\n  style: { DropdownStyle },\n  className: 'hexadash-dropdown',\n};\n\nDropdown.propTypes = {\n  placement: PropTypes.string,\n  title: PropTypes.string,\n  action: PropTypes.array,\n  content: PropTypes.node,\n  children: PropTypes.node,\n  style: PropTypes.object,\n  className: PropTypes.string,\n};\n\nexport { Dropdown };\n","import React from 'react';\nimport { Progress, Tag } from 'antd';\nimport UilEllipsisH from '@iconscout/react-unicons/icons/uil-ellipsis-h';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Dropdown } from '../../../components/dropdown/dropdown';\nimport { textRefactor } from '../../../components/utilities/utilities';\n\nfunction GridCard({ value }) {\n  const { id, title, status, content, percentage } = value;\n  return (\n    <>\n      <div className=\"bg-white dark:bg-white10 rounded-[10px]\">\n        <div className=\"pt-[30px] px-[30px]\">\n          <div className=\"flex items-start justify-between\">\n            <h1 className=\"flex flex-wrap items-center -m-0.5 text-base\">\n              <Link\n                to={`/admin/project/projectDetails/${id}`}\n                className=\"m-0.5 ltr:mr-[11px] rtl:ml-[11px] text-dark dark:text-white87\"\n              >\n                {title}\n              </Link>\n              <Tag\n                className={`text-white border-none ltr:mr-0 rtl:ml-0 uppercase text-[10px] ${\n                  status === 'early'\n                    ? 'bg-primary'\n                    : status === 'progress'\n                    ? 'bg-danger'\n                    : status === 'late'\n                    ? 'bg-warning'\n                    : status === 'complete'\n                    ? 'bg-success'\n                    : 'bg-dark'\n                } `}\n              >\n                {status}\n              </Tag>\n            </h1>\n            <Dropdown\n              content={\n                <div className=\"block bg-white dark:bg-[#1b1e2b] shadow-regular dark:shadow-[0_5px_30px_rgba(1,4,19,.60)] rounded-4\">\n                  <Link\n                    className=\"flex items-center text-theme-gray dark:text-white60 hover:bg-primary-transparent hover:text-primary dark:hover:bg-white10 px-3 py-1.5 text-sm active\"\n                    to=\"#\"\n                  >\n                    Total Income\n                  </Link>\n                  <Link\n                    className=\"flex items-center text-theme-gray dark:text-white60 hover:bg-primary-transparent hover:text-primary dark:hover:bg-white10 px-3 py-1.5 text-sm active\"\n                    to=\"#\"\n                  >\n                    Total Expense\n                  </Link>\n                  <Link\n                    className=\"flex items-center text-theme-gray dark:text-white60 hover:bg-primary-transparent hover:text-primary dark:hover:bg-white10 px-3 py-1.5 text-sm active\"\n                    to=\"#\"\n                  >\n                    Total Tax\n                  </Link>\n                  <Link\n                    className=\"flex items-center text-theme-gray dark:text-white60 hover:bg-primary-transparent hover:text-primary dark:hover:bg-white10 px-3 py-1.5 text-sm active\"\n                    to=\"#\"\n                  >\n                    Net Profit\n                  </Link>\n                </div>\n              }\n            >\n              <Link to=\"#\" className=\"text-light-extra dark:text-white60\">\n                <UilEllipsisH />\n              </Link>\n            </Dropdown>\n          </div>\n          <p className=\"text-body dark:text-white60 mt-[15px] mb-[25px]\">{textRefactor(content, 13)}</p>\n          <div className=\"flex items-center mb-[15px] gap-x-[30px]\">\n            <div className=\"flex flex-col\">\n              <span className=\"text-xs mb-0.5 text-body dark:text-white60\">Start Date</span>\n              <strong className=\"font-medium text-body dark:text-white60\">26 Dec 2019</strong>\n            </div>\n            <div className=\"flex flex-col\">\n              <span className=\"text-xs mb-0.5 text-body dark:text-white60\">Deadline</span>\n              <strong className=\"font-medium text-body dark:text-white60\">18 Mar 2020</strong>\n            </div>\n          </div>\n          <Progress\n            percent={status === 'complete' ? 100 : percentage}\n            strokeWidth={5}\n            status=\"primary\"\n            className=\" ltr:[&>span.ant-progress-text]:ml-2 rtl:[&>span.ant-progress-text]:mr-2 [&>span.ant-progress-text]:text-body dark:[&>span.ant-progress-text]:text-white60 [&>span.ant-progress-text]:text-xs [&>span.ant-progress-text]:font-medium [&.ant-progress-status-success>.ant-progress-text>span]:text-success\"\n          />\n          <p className=\"mt-0.5 text-body dark:text-white60 text-xs\">12/15 Task Completed</p>\n        </div>\n        <div className=\"pt-4 px-[30px] pb-[25px] mt-[17px] border-t border-regular dark:border-white10\">\n          <p className=\"mb-4 text-sm text-body dark:text-white60\">Assigned To</p>\n          <ul className=\"flex items-center flex-wrap -m-[3px]\">\n            <li className=\"m-[3px]\">\n              <img\n                className=\"w-[35px] min-w-[35px] h-[35px] rounded-full object-cover\"\n                src={require(`../../../static/img/users/1.png`)}\n                alt=\"\"\n              />\n            </li>\n            <li className=\"m-[3px]\">\n              <img\n                className=\"w-[35px] min-w-[35px] h-[35px] rounded-full object-cover\"\n                src={require(`../../../static/img/users/2.png`)}\n                alt=\"\"\n              />\n            </li>\n            <li className=\"m-[3px]\">\n              <img\n                className=\"w-[35px] min-w-[35px] h-[35px] rounded-full object-cover\"\n                src={require(`../../../static/img/users/3.png`)}\n                alt=\"\"\n              />\n            </li>\n            <li className=\"m-[3px]\">\n              <img\n                className=\"w-[35px] min-w-[35px] h-[35px] rounded-full object-cover\"\n                src={require(`../../../static/img/users/4.png`)}\n                alt=\"\"\n              />\n            </li>\n            <li className=\"m-[3px]\">\n              <img\n                className=\"w-[35px] min-w-[35px] h-[35px] rounded-full object-cover\"\n                src={require(`../../../static/img/users/5.png`)}\n                alt=\"\"\n              />\n            </li>\n            <li className=\"m-[3px]\">\n              <img\n                className=\"w-[35px] min-w-[35px] h-[35px] rounded-full object-cover\"\n                src={require(`../../../static/img/users/6.png`)}\n                alt=\"\"\n              />\n            </li>\n            <li className=\"m-[3px]\">\n              <img\n                className=\"w-[35px] min-w-[35px] h-[35px] rounded-full object-cover\"\n                src={require(`../../../static/img/users/7.png`)}\n                alt=\"\"\n              />\n            </li>\n          </ul>\n        </div>\n      </div>\n    </>\n  );\n}\n\nGridCard.propTypes = {\n  value: PropTypes.object,\n};\n\nexport default GridCard;\n","/* eslint-disable no-underscore-dangle */\nconst textRefactor = (text, size) => {\n  return `${text.split(' ').slice(0, size).join(' ')}...`;\n};\n\nconst chartLinearGradient = (canvas, height, color) => {\n  const ctx = canvas.getContext('2d');\n  const gradient = ctx.createLinearGradient(0, 0, 0, height);\n  gradient.addColorStop(0, `${color.start}`);\n  gradient.addColorStop(1, `${color.end}`);\n  return gradient;\n};\n\n// Custom Tooltip\nconst customTooltips = function (context) {\n  // Tooltip Element\n  let tooltipEl = document.querySelector('.chartjs-tooltip');\n  if (!this._chart.canvas.closest('.hexadash-chart-container').contains(tooltipEl)) {\n    tooltipEl = document.createElement('div');\n    tooltipEl.className =\n      'chartjs-tooltip absolute bg-white dark:bg-[#323541] min-w-[140px] px-1.5 py-2 rounded-md dark:border-white10 dark:border-[#323541] border-1 shadow-custom dark:shadow-none dark:shadow-[0_5px_30px_rgba(1,4,19,.60)] before:absolute before:border-x-5 before:border-t-5 before:border-transparent before:border-t-gray-200 before:rounded-full before:-bottom-1.5 ltr:before:left-1/2 rtl:before:right-1/2 before:-translate-x-2/45';\n    tooltipEl.innerHTML = '<table></table>';\n\n    document.querySelectorAll('.hexadash-chart-container').forEach((el) => {\n      if (el.contains(document.querySelector('.chartjs-tooltip'))) {\n        document.querySelector('.chartjs-tooltip').remove();\n      }\n    });\n\n    this._chart.canvas.closest('.hexadash-chart-container').appendChild(tooltipEl);\n  }\n  const tooltipModel = context.tooltip;\n  // Hide if no tooltip\n  if (tooltipModel.opacity === 0) {\n    tooltipEl.style.opacity = 0;\n    return;\n  }\n  // Set caret Position\n  tooltipEl.classList.remove('above', 'below', 'no-transform');\n  if (tooltipModel.yAlign) {\n    tooltipEl.classList.add(tooltipModel.yAlign);\n  } else {\n    tooltipEl.classList.add('no-transform');\n  }\n\n  function getBody(bodyItem) {\n    return bodyItem.lines;\n  }\n\n  // Set Text\n  if (tooltipModel.body) {\n    const titleLines = tooltipModel.title || [];\n    const bodyLines = tooltipModel.body.map(getBody);\n\n    let innerHtml = '<thead>';\n\n    titleLines.forEach(function (title) {\n      innerHtml += `<div class='mb-1 text-body dark:text-white87 text-xs font-medium capitalize'>${title}</div>`;\n    });\n    innerHtml += '</thead><tbody>';\n\n    bodyLines.forEach(function (body, i) {\n      const colors = tooltipModel.labelColors[i];\n      let style = `background:${colors.backgroundColor}`;\n      style += `; border-color:${colors.borderColor}`;\n      style += '; border-width: 2px';\n      style += '; border-radius: 30px';\n      const span = `<span class=\"inline-block w-[10px] h-[10px] ltr:mr-2 rtl:ml-2 dark:!border-transparent\" style=\"${style}\"></span>`;\n      innerHtml += `<tr><td class=\"flex items-center mb-[3px] text-light-extra dark:text-white60 text-xs font-medium\">${span}${body}</td></tr>`;\n    });\n\n    innerHtml += '</tbody>';\n\n    const tableRoot = tooltipEl.querySelector('table');\n    tableRoot.innerHTML = innerHtml;\n  }\n\n  const positionY = this._chart.canvas.offsetTop;\n  const positionX = this._chart.canvas.offsetLeft;\n  const toolTip = document.querySelector('.chartjs-tooltip');\n  const toolTipHeight = toolTip.clientHeight;\n\n  // Display, position, and set styles for font\n  tooltipEl.style.opacity = 1;\n  tooltipEl.style.left = `${positionX + tooltipModel.caretX}px`;\n  tooltipEl.style.top = `${\n    positionY +\n    tooltipModel.caretY -\n    (tooltipModel.caretY > 10 ? (toolTipHeight > 100 ? toolTipHeight + 5 : toolTipHeight + 15) : 70)\n  }px`;\n  tooltipEl.style.fontFamily = tooltipModel.options.bodyFontFamily;\n  tooltipEl.style.fontSize = `${tooltipModel.options.bodyFontSize}px`;\n  tooltipEl.style.fontStyle = tooltipModel.options.bodyFontStyle;\n  tooltipEl.style.padding = `${tooltipModel.yPadding}px ${tooltipModel.xPadding}px`;\n};\n\nexport { textRefactor, chartLinearGradient, customTooltips };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst UilEllipsisH = (props) => {\n  const { color, size, ...otherProps } = props\n  return React.createElement('svg', {\n    xmlns: 'http://www.w3.org/2000/svg',\n    width: size,\n    height: size,\n    viewBox: '0 0 24 24',\n    fill: color,\n    ...otherProps\n  }, React.createElement('path', {\n    d: 'M12,10a2,2,0,1,0,2,2A2,2,0,0,0,12,10ZM5,10a2,2,0,1,0,2,2A2,2,0,0,0,5,10Zm14,0a2,2,0,1,0,2,2A2,2,0,0,0,19,10Z'\n  }));\n};\n\nUilEllipsisH.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nUilEllipsisH.defaultProps = {\n  color: 'currentColor',\n  size: '24',\n};\n\nexport default UilEllipsisH;","import Dropdown from './dropdown';\nexport default Dropdown;"],"names":["Styled","div","_templateObject","_taggedTemplateLiteral","DropdownStyle","Dropdown","_templateObject2","props","content","placement","title","action","children","style","className","_jsx","overlayClassName","overlay","GlobalUtilityStyle","trigger","_Fragment","_jsxs","Link","to","defaultProps","_ref","value","id","status","percentage","concat","Tag","UilEllipsisH","text","size","split","slice","join","Progress","percent","strokeWidth","src","require","alt","textRefactor","color","otherProps","React","xmlns","width","height","viewBox","fill","d","propTypes","PropTypes"],"sourceRoot":""}